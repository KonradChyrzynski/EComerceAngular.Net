{"ast":null,"code":"import _asyncToGenerator from \"F:\\\\SPAFORUNI\\\\SPA\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BeerService {\n  constructor(http) {\n    this.http = http;\n    this.beers = [];\n    this.url = 'https://api.punkapi.com/v2/beers';\n  }\n\n  getBeersFromApi() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const response = yield _this.http.get(_this.url).toPromise();\n        _this.beers = response;\n        yield _this.fetchPricesForBeers();\n        return _this.beers;\n      } catch (error) {\n        console.error('Error fetching beers:', error);\n        throw error;\n      }\n    })();\n  }\n\n  getBeers() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.beers.length === 0) {\n        yield _this2.getBeersFromApi();\n      }\n\n      return _this2.beers;\n    })();\n  }\n\n  fetchPricesForBeers() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const pricePromises = [];\n\n      for (const bear of _this3.beers) {\n        const pricePromise = _this3.fetchPriceById(bear.id).then(price => bear.price = price);\n\n        pricePromises.push(pricePromise);\n      }\n\n      yield Promise.all(pricePromises);\n    })();\n  }\n\n  fetchPriceById(id) {\n    return _asyncToGenerator(function* () {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          const staticPrice = 15.0;\n          resolve(staticPrice);\n        }, 1000);\n      });\n    })();\n  }\n\n}\n\nBeerService.ɵfac = function BeerService_Factory(t) {\n  return new (t || BeerService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nBeerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BeerService,\n  factory: BeerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["F:/SPAFORUNI/SPA/ClientApp/src/app/service/beer.service.ts"],"names":["i0","i1","BeerService","constructor","http","beers","url","getBeersFromApi","response","get","toPromise","fetchPricesForBeers","error","console","getBeers","length","pricePromises","bear","pricePromise","fetchPriceById","id","then","price","push","Promise","all","resolve","setTimeout","staticPrice","ɵfac","BeerService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,GAAL,GAAW,kCAAX;AACH;;AACKC,EAAAA,eAAe,GAAG;AAAA;;AAAA;AACpB,UAAI;AACA,cAAMC,QAAQ,SAAS,KAAI,CAACJ,IAAL,CAAUK,GAAV,CAAc,KAAI,CAACH,GAAnB,EAAwBI,SAAxB,EAAvB;AACA,QAAA,KAAI,CAACL,KAAL,GAAaG,QAAb;AACA,cAAM,KAAI,CAACG,mBAAL,EAAN;AACA,eAAO,KAAI,CAACN,KAAZ;AACH,OALD,CAMA,OAAOO,KAAP,EAAc;AACVC,QAAAA,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACA,cAAMA,KAAN;AACH;AAVmB;AAWvB;;AACKE,EAAAA,QAAQ,GAAG;AAAA;;AAAA;AACb,UAAI,MAAI,CAACT,KAAL,CAAWU,MAAX,KAAsB,CAA1B,EAA6B;AACzB,cAAM,MAAI,CAACR,eAAL,EAAN;AACH;;AACD,aAAO,MAAI,CAACF,KAAZ;AAJa;AAKhB;;AACKM,EAAAA,mBAAmB,GAAG;AAAA;;AAAA;AACxB,YAAMK,aAAa,GAAG,EAAtB;;AACA,WAAK,MAAMC,IAAX,IAAmB,MAAI,CAACZ,KAAxB,EAA+B;AAC3B,cAAMa,YAAY,GAAG,MAAI,CAACC,cAAL,CAAoBF,IAAI,CAACG,EAAzB,EAChBC,IADgB,CACXC,KAAK,IAAIL,IAAI,CAACK,KAAL,GAAaA,KADX,CAArB;;AAEAN,QAAAA,aAAa,CAACO,IAAd,CAAmBL,YAAnB;AACH;;AACD,YAAMM,OAAO,CAACC,GAAR,CAAYT,aAAZ,CAAN;AAPwB;AAQ3B;;AACKG,EAAAA,cAAc,CAACC,EAAD,EAAK;AAAA;AACrB,aAAO,IAAII,OAAJ,CAAaE,OAAD,IAAa;AAC5BC,QAAAA,UAAU,CAAC,MAAM;AACb,gBAAMC,WAAW,GAAG,IAApB;AACAF,UAAAA,OAAO,CAACE,WAAD,CAAP;AACH,SAHS,EAGP,IAHO,CAAV;AAIH,OALM,CAAP;AADqB;AAOxB;;AAxCoB;;AA0CzB1B,WAAW,CAAC2B,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAI7B,WAAV,EAAuBF,EAAE,CAACgC,QAAH,CAAY/B,EAAE,CAACgC,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACA/B,WAAW,CAACgC,KAAZ,GAAoB,aAAclC,EAAE,CAACmC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAElC,WAAT;AAAsBmC,EAAAA,OAAO,EAAEnC,WAAW,CAAC2B,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class BeerService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.beers = [];\r\n        this.url = 'https://api.punkapi.com/v2/beers';\r\n    }\r\n    async getBeersFromApi() {\r\n        try {\r\n            const response = await this.http.get(this.url).toPromise();\r\n            this.beers = response;\r\n            await this.fetchPricesForBeers();\r\n            return this.beers;\r\n        }\r\n        catch (error) {\r\n            console.error('Error fetching beers:', error);\r\n            throw error;\r\n        }\r\n    }\r\n    async getBeers() {\r\n        if (this.beers.length === 0) {\r\n            await this.getBeersFromApi();\r\n        }\r\n        return this.beers;\r\n    }\r\n    async fetchPricesForBeers() {\r\n        const pricePromises = [];\r\n        for (const bear of this.beers) {\r\n            const pricePromise = this.fetchPriceById(bear.id)\r\n                .then(price => bear.price = price);\r\n            pricePromises.push(pricePromise);\r\n        }\r\n        await Promise.all(pricePromises);\r\n    }\r\n    async fetchPriceById(id) {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                const staticPrice = 15.0;\r\n                resolve(staticPrice);\r\n            }, 1000);\r\n        });\r\n    }\r\n}\r\nBeerService.ɵfac = function BeerService_Factory(t) { return new (t || BeerService)(i0.ɵɵinject(i1.HttpClient)); };\r\nBeerService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: BeerService, factory: BeerService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}
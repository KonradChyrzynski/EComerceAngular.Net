{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/48796/Desktop/Finals/SPA/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BeerService {\n  constructor(http) {\n    this.http = http;\n    this.items = [];\n    this.url = 'https://api.punkapi.com/v2/beers';\n  }\n\n  getArrayOfItems() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const response = yield _this.http.get(_this.url).toPromise();\n        _this.items = response;\n        yield _this.fulfillMissingFields();\n      } catch (error) {\n        console.error('Error fetching items:', error);\n        throw error;\n      }\n    })();\n  }\n\n  getItems() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.items.length === 0) {\n        yield _this2.getArrayOfItems();\n      }\n\n      return _this2.items;\n    })();\n  }\n\n  fulfillMissingFields() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const pricePromises = [];\n\n      for (const bear of _this3.items) {\n        bear.in_cart = false;\n        bear.favourite = false;\n\n        const pricePromise = _this3.fetchPriceById(bear.id).then(price => bear.price = price);\n\n        pricePromises.push(pricePromise);\n      }\n\n      yield Promise.all(pricePromises);\n    })();\n  }\n\n  fetchPriceById(id) {\n    return _asyncToGenerator(function* () {\n      //simulate db call\n      return new Promise(resolve => {\n        setTimeout(() => {\n          const staticPrice = 15.0;\n          resolve(staticPrice);\n        }, 1000);\n      });\n    })();\n  }\n\n  markAsFavorite(id) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      for (const item of _this4.items) {\n        if (item.id === id) {\n          item.favourite = true;\n          return true;\n        }\n      }\n\n      return false;\n    })();\n  }\n\n}\n\nBeerService.ɵfac = function BeerService_Factory(t) {\n  return new (t || BeerService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nBeerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BeerService,\n  factory: BeerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AASA,OAAM,MAAOA,WAAP,CAAkB;EACpBC,YAAoBC,IAApB,EAAoC;IAAhB;IAEpB,aAAiB,EAAjB;IAEA,WAAM,kCAAN;EAJyC;;EAMnCC,eAAe;IAAA;;IAAA;MACjB,IAAI;QACA,MAAMC,QAAQ,SAAc,KAAI,CAACF,IAAL,CAAUG,GAAV,CAAc,KAAI,CAACC,GAAnB,EAAwBC,SAAxB,EAA5B;QACA,KAAI,CAACC,KAAL,GAAaJ,QAAb;QAEA,MAAM,KAAI,CAACK,oBAAL,EAAN;MACH,CALD,CAKE,OAAOC,KAAP,EAAc;QACZC,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;QACA,MAAMA,KAAN;MACH;IATgB;EAUpB;;EAEKE,QAAQ;IAAA;;IAAA;MAEV,IAAG,MAAI,CAACJ,KAAL,CAAWK,MAAX,KAAsB,CAAzB,EAA2B;QACvB,MAAM,MAAI,CAACV,eAAL,EAAN;MACH;;MAED,OAAO,MAAI,CAACK,KAAZ;IANU;EAOb;;EAEKC,oBAAoB;IAAA;;IAAA;MACtB,MAAMK,aAAa,GAAsB,EAAzC;;MAEA,KAAK,MAAMC,IAAX,IAAmB,MAAI,CAACP,KAAxB,EAA+B;QAC3BO,IAAI,CAACC,OAAL,GAAe,KAAf;QACAD,IAAI,CAACE,SAAL,GAAiB,KAAjB;;QAEA,MAAMC,YAAY,GAAoB,MAAI,CAACC,cAAL,CAAoBJ,IAAI,CAACK,EAAzB,EACjCC,IADiC,CAC5BC,KAAK,IAAIP,IAAI,CAACO,KAAL,GAAaA,KADM,CAAtC;;QAIAR,aAAa,CAACS,IAAd,CAAmBL,YAAnB;MACH;;MAED,MAAMM,OAAO,CAACC,GAAR,CAAYX,aAAZ,CAAN;IAdsB;EAezB;;EAEKK,cAAc,CAACC,EAAD,EAAW;IAAA;MAC3B;MACA,OAAO,IAAII,OAAJ,CAAqBE,OAAD,IAAY;QACnCC,UAAU,CAAC,MAAK;UACZ,MAAMC,WAAW,GAAG,IAApB;UACAF,OAAO,CAACE,WAAD,CAAP;QACH,CAHS,EAGP,IAHO,CAAV;MAIH,CALM,CAAP;IAF2B;EAQ9B;;EAEKC,cAAc,CAACT,EAAD,EAAW;IAAA;;IAAA;MAC3B,KAAI,MAAMU,IAAV,IAAkB,MAAI,CAACtB,KAAvB,EAA8B;QAC1B,IAAGsB,IAAI,CAACV,EAAL,KAAYA,EAAf,EAAkB;UACdU,IAAI,CAACb,SAAL,GAAiB,IAAjB;UACA,OAAO,IAAP;QACH;MACJ;;MAED,OAAO,KAAP;IAR2B;EAS9B;;AAhEmB;;;mBAAXjB,aAAW+B;AAAA;;;SAAX/B;EAAWgC,SAAXhC,WAAW;EAAAiC,YAHJ","names":["BeerService","constructor","http","getArrayOfItems","response","get","url","toPromise","items","fulfillMissingFields","error","console","getItems","length","pricePromises","bear","in_cart","favourite","pricePromise","fetchPriceById","id","then","price","push","Promise","all","resolve","setTimeout","staticPrice","markAsFavorite","item","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\48796\\Desktop\\Finals\\SPA\\ClientApp\\src\\app\\service\\beer.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { IBeer } from '../IBeer';\r\n\r\n@Injectable(\r\n    {\r\n        providedIn: 'root',\r\n    }\r\n)\r\nexport class BeerService {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    items: IBeer[] = []\r\n    \r\n    url = 'https://api.punkapi.com/v2/beers';\r\n\r\n    async getArrayOfItems(): Promise<void> {\r\n        try {\r\n            const response: any = await this.http.get(this.url).toPromise();\r\n            this.items = response as IBeer[];\r\n\r\n            await this.fulfillMissingFields();\r\n        } catch (error) {\r\n            console.error('Error fetching items:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getItems(): Promise<IBeer[]> {\r\n\r\n        if(this.items.length === 0){\r\n            await this.getArrayOfItems();\r\n        }\r\n\r\n        return this.items;\r\n    }\r\n\r\n    async fulfillMissingFields(): Promise<void> {\r\n        const pricePromises: Promise<number>[] = [];\r\n\r\n        for (const bear of this.items) {\r\n            bear.in_cart = false;\r\n            bear.favourite = false;\r\n\r\n            const pricePromise: Promise<number> = this.fetchPriceById(bear.id)\r\n                .then(price => bear.price = price);\r\n\r\n\r\n            pricePromises.push(pricePromise);\r\n        }\r\n\r\n        await Promise.all(pricePromises);\r\n    }\r\n\r\n    async fetchPriceById(id: number): Promise<number> {\r\n        //simulate db call\r\n        return new Promise<number>((resolve) => {\r\n            setTimeout(() => {\r\n                const staticPrice = 15.0;\r\n                resolve(staticPrice);\r\n            }, 1000); \r\n        });\r\n    }\r\n\r\n    async markAsFavorite(id: number): Promise<boolean> {\r\n        for(const item of this.items) {\r\n            if(item.id === id){\r\n                item.favourite = true;\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}